From 67bbb500fa5e690bdf2fe7d970644bae97fe8545 Mon Sep 17 00:00:00 2001
From: Zentrik <llvm.zentrik@gmail.com>
Date: Sun, 23 Mar 2025 13:34:02 +0000
Subject: [PATCH] 76d5a79bed007769745d44a5e298c09614cad423

Try adapting to "[ORC] Drop EHFrameRegistrar, register eh-frames with AllocActions (#130719)"

Probably broken.
---
 src/debuginfo.cpp    | 12 ++++++------
 src/jitlayers.cpp    | 24 +++++++-----------------
 src/julia_internal.h | 10 ++++++++--
 3 files changed, 21 insertions(+), 25 deletions(-)

diff --git a/src/debuginfo.cpp b/src/debuginfo.cpp
index 53c07c978f..4d2441ac7d 100644
--- a/src/debuginfo.cpp
+++ b/src/debuginfo.cpp
@@ -1280,7 +1280,7 @@ extern "C" jl_code_instance_t *jl_gdblookupci(void *p) JL_NOTSAFEPOINT
  */
 
 // This implementation handles frame registration for local targets.
-void register_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void register_eh_frames(uint8_t *Addr, size_t Size)
 {
   // On OS X OS X __register_frame takes a single FDE as an argument.
   // See http://lists.cs.uiuc.edu/pipermail/llvmdev/2013-April/061768.html
@@ -1289,7 +1289,7 @@ void register_eh_frames(uint8_t *Addr, size_t Size)
     });
 }
 
-void deregister_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void deregister_eh_frames(uint8_t *Addr, size_t Size)
 {
    processFDEs((char*)Addr, Size, [](const char *Entry) JL_NOTSAFEPOINT {
       getJITDebugRegistry().libc_frames.libc_deregister_frame(Entry);
@@ -1475,7 +1475,7 @@ static DW_EH_PE parseCIE(const uint8_t *Addr, const uint8_t *End) JL_NOTSAFEPOIN
     return DW_EH_PE_absptr;
 }
 
-void register_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void register_eh_frames(uint8_t *Addr, size_t Size)
 {
     // System unwinder
     jl_profile_atomic([&]() JL_NOTSAFEPOINT {
@@ -1611,7 +1611,7 @@ void register_eh_frames(uint8_t *Addr, size_t Size)
     });
 }
 
-void deregister_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void deregister_eh_frames(uint8_t *Addr, size_t Size)
 {
     jl_profile_atomic([&]() JL_NOTSAFEPOINT {
         __deregister_frame(Addr);
@@ -1623,11 +1623,11 @@ void deregister_eh_frames(uint8_t *Addr, size_t Size)
 
 #else
 
-void register_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void register_eh_frames(uint8_t *Addr, size_t Size)
 {
 }
 
-void deregister_eh_frames(uint8_t *Addr, size_t Size)
+extern "C" void deregister_eh_frames(uint8_t *Addr, size_t Size)
 {
 }
 
diff --git a/src/jitlayers.cpp b/src/jitlayers.cpp
index ac64c6ee8b..1fb1c47eb8 100644
--- a/src/jitlayers.cpp
+++ b/src/jitlayers.cpp
@@ -14,9 +14,11 @@
 #include <llvm/ExecutionEngine/Orc/ExecutionUtils.h>
 #include <llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h>
 #include <llvm/ExecutionEngine/Orc/TargetProcess/JITLoaderGDB.h>
+#if JL_LLVM_VERSION >= 210000
+#include <llvm/ExecutionEngine/Orc/EHFrameRegistrationPlugin.h>
+#endif
 #if JL_LLVM_VERSION >= 200000
 #include <llvm/ExecutionEngine/Orc/AbsoluteSymbols.h>
-#include <llvm/ExecutionEngine/Orc/EHFrameRegistrationPlugin.h>
 #endif
 #if JL_LLVM_VERSION >= 180000
 #include <llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h>
@@ -1166,18 +1168,6 @@ std::unique_ptr<jitlink::JITLinkMemoryManager> createJITLinkMemoryManager() JL_N
 #endif
 }
 
-class JLEHFrameRegistrar final : public jitlink::EHFrameRegistrar {
-public:
-    Error registerEHFrames(orc::ExecutorAddrRange EHFrameSection) override {
-        register_eh_frames(EHFrameSection.Start.toPtr<uint8_t *>(), static_cast<size_t>(EHFrameSection.size()));
-        return Error::success();
-    }
-
-    Error deregisterEHFrames(orc::ExecutorAddrRange EHFrameSection) override {
-        deregister_eh_frames(EHFrameSection.Start.toPtr<uint8_t *>(), static_cast<size_t>(EHFrameSection.size()));
-        return Error::success();
-    }
-};
 
 RTDyldMemoryManager *createRTDyldMemoryManager(void) JL_NOTSAFEPOINT;
 
@@ -1866,12 +1856,12 @@ JuliaOJIT::JuliaOJIT()
 # if defined(LLVM_SHLIB)
     // When dynamically linking against LLVM, use our custom EH frame registration code
     // also used with RTDyld to inform both our and the libc copy of libunwind.
-    auto ehRegistrar = std::make_unique<JLEHFrameRegistrar>();
+    ObjectLayer.addPlugin(std::make_unique<llvm::orc::EHFrameRegistrationPlugin>(
+        ExecutorAddr::fromPtr(&register_eh_frames), ExecutorAddr::fromPtr(&deregister_eh_frames)));
 # else
-    auto ehRegistrar = std::make_unique<jitlink::InProcessEHFrameRegistrar>();
+    ObjectLayer.addPlugin(llvm::orc::EHFrameRegistrationPlugin::Create(ES));
 # endif
-    ObjectLayer.addPlugin(std::make_unique<EHFrameRegistrationPlugin>(
-        ES, std::move(ehRegistrar)));
+
 
     ObjectLayer.addPlugin(std::make_unique<JLDebuginfoPlugin>());
     ObjectLayer.addPlugin(std::make_unique<JLMemoryUsagePlugin>(&jit_bytes_size));
diff --git a/src/julia_internal.h b/src/julia_internal.h
index 9966d36027..640035e0a0 100644
--- a/src/julia_internal.h
+++ b/src/julia_internal.h
@@ -1835,8 +1835,14 @@ JL_DLLEXPORT jl_value_t *jl_argtype_without_function(jl_value_t *ftypes);
 
 JL_DLLEXPORT unsigned jl_special_vector_alignment(size_t nfields, jl_value_t *field_type);
 
-void register_eh_frames(uint8_t *Addr, size_t Size) JL_NOTSAFEPOINT;
-void deregister_eh_frames(uint8_t *Addr, size_t Size) JL_NOTSAFEPOINT;
+#ifdef __cplusplus
+extern "C" {
+#endif
+    void register_eh_frames(uint8_t *Addr, size_t Size) JL_NOTSAFEPOINT;
+    void deregister_eh_frames(uint8_t *Addr, size_t Size) JL_NOTSAFEPOINT;
+#ifdef __cplusplus
+}
+#endif
 
 STATIC_INLINE void *jl_get_frame_addr(void) JL_NOTSAFEPOINT
 {
-- 
2.34.1

