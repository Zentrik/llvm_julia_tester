name: Build LLVM assert Template
on:
  workflow_call:
    inputs:
      target:
        type: string
        required: true
      LLVM_VERSION:
        type: string
        required: true
      LLVM_VERSION_MAJOR:
        type: string
        required: true
      save_cache:
        type: boolean
        required: true

jobs:
  build_llvm_assert:
    runs-on: ubuntu-latest
    env:
        BINARYBUILDER_USE_CCACHE: true
        BINARYBUILDER_AUTOMATIC_APPLE: true
        BINARYBUILDER_STORAGE_DIR: ${{ github.workspace }}/binarybuilder_storage
        BINARYBUILDER_CCACHE_DIR: ${{ github.workspace }}/binarybuilder_ccache
        LLVM_VERSION: ${{ inputs.LLVM_VERSION }}
        LLVM_VERSION_MAJOR: ${{ inputs.LLVM_VERSION_MAJOR }}
    steps:
      - uses: actions/checkout@v4
      - name: Maximize build disk space (Only remove unwanted software)
          # You may pin to the exact commit or the version.
          # uses: AdityaGarg8/remove-unwanted-software@8831c82abf29b34eb2caac48d5f999ecfc0d8eef
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          # # Removes .NET runtime and libraries. (frees ~2 GB)
          # remove-dotnet: true
          # Removes Android SDKs and Tools. (frees ~9 GB)
          remove-android: true
          # Removes GHC (Haskell) artifacts. (frees ~5.2 GB)
          remove-haskell: true
          # # Removes CodeQL Action Bundles. (frees ~5.4 GB)
          # remove-codeql: true
          # # Removes cached Docker images. (frees ~3.2 GB)
          # remove-docker-images: true
          # # Removes unwanted large Apt packages. (frees ~3.1 GB)
          # remove-large-packages: true
          # # Removes cached tools used by setup actions by GitHub. (frees ~8.3 GB)
          # remove-cached-tools: true
          # Enables detailed logging of the action
          verbose: false
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.7'
          arch: x64
      - name: Cache BinaryBuilder Storage Directory
        if: inputs.save_cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/binarybuilder_storage
          key: binarybuilder_storage-${{ inputs.LLVM_VERSION }}
          restore-keys: binarybuilder_storage
      - name: Restore Cached BinaryBuilder Storage Directory
        if: ${{ !inputs.save_cache }}
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/binarybuilder_storage
          key: binarybuilder_storage-${{ inputs.LLVM_VERSION }}
          restore-keys: binarybuilder_storage
      - name: Cache BinaryBuilder ccache Directory
        if: github.ref == 'refs/heads/master' && github.event.inputs.LLVM_VERSION == ''
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/binarybuilder_ccache
          key: ${{ inputs.target }}-${{ inputs.LLVM_VERSION }}
          restore-keys: ${{ inputs.target }}
      - name: Restore Cached BinaryBuilder ccache Directory
        if: github.ref != 'refs/heads/master' || github.event.inputs.LLVM_VERSION != ''
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/binarybuilder_ccache
          key: ${{ inputs.target }}-${{ inputs.LLVM_VERSION }}
          restore-keys: ${{ inputs.target }}
      - name: Build LLVM assert on ${{ inputs.target }}
        id: build
        run: |
          set -o xtrace
          git clone https://github.com/Zentrik/Yggdrasil.git
          cd Yggdrasil
          git fetch
          git switch llvm-19-llvm
          git apply $GITHUB_WORKSPACE/yggy-patches/*
          cd L/LLVM/LLVM_full@19
          cp $GITHUB_WORKSPACE/llvm-patches/* bundled/patches/
          julia -e '
            using Pkg
            Pkg.activate(ENV["GITHUB_WORKSPACE"])
            Pkg.instantiate(verbose=true)

            version = VersionNumber(parse(Int, ENV["LLVM_VERSION_MAJOR"]), 0, 0)

            include("../common.jl")

            build_tarballs(["--verbose", "${{ inputs.target }}", "--skip-audit"], configure_build([], version; update_sdk=false, assert=true, experimental_platforms=true, git_ver=ENV["LLVM_VERSION"])...; preferred_gcc_version=v"10", preferred_llvm_version=v"18", julia_compat="1.6")
          '
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-assert-${{ inputs.target }}-${{ inputs.LLVM_VERSION }}
          path: ${{ github.workspace }}/Yggdrasil/L/LLVM/LLVM_full@19/products
          if-no-files-found: warn
  build_julia_assert:
    if: inputs.target == 'x86_64-w64-mingw32-cxx11'
    runs-on: windows-latest
    needs: build_llvm_assert
    env:
      LLVM_VERSION_MAJOR: ${{ inputs.LLVM_VERSION_MAJOR }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            cmake
            diffutils
            git
            m4
            make
            patch
            tar
            p7zip
            curl
            python
            mingw-w64-x86_64-gcc
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: llvm-assert-${{ inputs.target }}-${{ inputs.LLVM_VERSION }}
      - name: "Build Julia Assert"
        run: |
          set -o xtrace
          export MSYS=winsymlinks:sysfile
          git config --global core.eol lf
          git config --global core.autocrlf input
          git clone https://github.com/Zentrik/julia
          cd julia
          git fetch
          git switch llvm-19
          git apply $GITHUB_WORKSPACE/julia-patches/adapt_to_102993.patch
          mkdir -p deps/srccache
          mv ../LLVM_full_assert.v${LLVM_VERSION_MAJOR}.0.0.${{ inputs.target }}.tar.gz deps/srccache/libLLVM.v18.1.7+2.${{ inputs.target }}.tar.gz
          make -j4 FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1 VERBOSE=1 LLVM_JLL_TAGS= LLVM_SHARED_LIB_VER_SUFFIX=${LLVM_VERSION_MAJOR}jl
