diff --git a/llvm/include/llvm/CodeGen/AsmPrinterHandler.h b/llvm/include/llvm/CodeGen/AsmPrinterHandler.h
index bf3f6c53027a..0d13f8be0865 100644
--- a/llvm/include/llvm/CodeGen/AsmPrinterHandler.h
+++ b/llvm/include/llvm/CodeGen/AsmPrinterHandler.h
@@ -74,8 +74,6 @@ public:
   /// Process end of an instruction.
   virtual void endInstruction() {}
 
-  virtual void beginCodeAlignment(const MachineBasicBlock &MBB) {}
-
   /// Emit target-specific EH funclet machinery.
   virtual void beginFunclet(const MachineBasicBlock &MBB,
                             MCSymbol *Sym = nullptr) {}
diff --git a/llvm/include/llvm/CodeGen/DebugHandlerBase.h b/llvm/include/llvm/CodeGen/DebugHandlerBase.h
index 17764b31f30e..59a67c245455 100644
--- a/llvm/include/llvm/CodeGen/DebugHandlerBase.h
+++ b/llvm/include/llvm/CodeGen/DebugHandlerBase.h
@@ -128,6 +128,7 @@ public:
   void beginFunction(const MachineFunction *MF) override;
   void endFunction(const MachineFunction *MF) override;
 
+
   void beginBasicBlockSection(const MachineBasicBlock &MBB) override;
   void endBasicBlockSection(const MachineBasicBlock &MBB) override;
 
diff --git a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
index 6d510d11c38e..676d99fb8e64 100644
--- a/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
+++ b/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@ -1975,8 +1975,11 @@ void AsmPrinter::emitFunctionBody() {
     Handler->markFunctionEnd();
   for (auto &Handler : EHHandlers)
     Handler->markFunctionEnd();
-  // Update the end label of the entry block's section.
-  MBBSectionRanges[MF->front().getSectionID()].EndLabel = CurrentFnEnd;
+
+  assert(!MBBSectionRanges.contains(MF->front().getSectionID()) &&
+         "Overwrite section range");
+  MBBSectionRanges[MF->front().getSectionID()] =
+      MBBSectionRange{CurrentFnBegin, CurrentFnEnd};
 
   // Print out jump tables referenced by the function.
   emitJumpTableInfo();
@@ -3971,9 +3974,6 @@ void AsmPrinter::emitBasicBlockStart(const MachineBasicBlock &MBB) {
     CurrentSectionBeginSym = MBB.getSymbol();
   }
 
-  for (auto &Handler : Handlers)
-    Handler->beginCodeAlignment(MBB);
-
   // Emit an alignment directive for this block, if needed.
   const Align Alignment = MBB.getAlignment();
   if (Alignment != Align(1))
