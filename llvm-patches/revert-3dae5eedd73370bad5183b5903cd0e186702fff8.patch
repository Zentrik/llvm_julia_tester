diff --git b/compiler-rt/lib/fuzzer/FuzzerExtFunctionsWindows.cpp a/compiler-rt/lib/fuzzer/FuzzerExtFunctionsWindows.cpp
index dfc32ac9db29..692b078d24fb 100644
--- b/compiler-rt/lib/fuzzer/FuzzerExtFunctionsWindows.cpp
+++ a/compiler-rt/lib/fuzzer/FuzzerExtFunctionsWindows.cpp
@@ -22,11 +22,6 @@ using namespace fuzzer;
 #define STRINGIFY(A) STRINGIFY_(A)
 
 #if LIBFUZZER_MSVC
-#define GET_FUNCTION_ADDRESS(fn) &fn
-#else
-#define GET_FUNCTION_ADDRESS(fn) __builtin_function_start(fn)
-#endif // LIBFUZER_MSVC
-
 // Copied from compiler-rt/lib/sanitizer_common/sanitizer_win_defs.h
 #if defined(_M_IX86) || defined(__i386__)
 #define WIN_SYM_PREFIX "_"
@@ -39,6 +34,16 @@ using namespace fuzzer;
 #define EXTERNAL_FUNC(Name, Default)                                           \
   __pragma(comment(linker, "/alternatename:" WIN_SYM_PREFIX STRINGIFY(         \
                                Name) "=" WIN_SYM_PREFIX STRINGIFY(Default)))
+#define GET_FUNCTION_ADDRESS(fn) &fn
+#else
+// Declare external functions as weak to allow them to default to a specified
+// function if not defined explicitly. We must use weak symbols because clang's
+// support for alternatename is not 100%, see
+// https://bugs.llvm.org/show_bug.cgi?id=40218 for more details.
+#define EXTERNAL_FUNC(Name, Default) \
+  __attribute__((weak, alias(STRINGIFY(Default))))
+#define GET_FUNCTION_ADDRESS(fn) __builtin_function_start(fn)
+#endif // LIBFUZZER_MSVC
 
 extern "C" {
 #define EXT_FUNC(NAME, RETURN_TYPE, FUNC_SIG, WARN)         \
